DXR Template Documentation
==========================
_This document have all you need to know to write a template for DXR._


The Templating Engine
---------------------
DXR uses the templating engine [jinja2](http://jinja.pocoo.org), basic knowledge
of this templating engine is required to write templates for DXR.
To learn about Jinja2 read the [template designers documentation](jinja.pocoo.org/docs/templates/).
This document will assume you are familiar with Jinja2 and in particular the 
template inheritance feature from Jinja2.

DXR URL Layout
--------------
DXR assumes a simple URL layout, it is necessary to understand this for the
templates to integrate properly. Files are located inside subfolders of their
repsective trees. That is www-folder/{{tree}}/{{path-to-file}}, notice no HTML
extension, so `test/run.cpp` in `mytree` becomes `http://.../mytree/test/run.cpp`.

When routing links or redirecting to files the anchor `#l{{line_number}}` is
assumed to focus the page on line `line_number` and possibly highlight this line.
The template must support this feature, possibly implemented in javascript.
Note: `line_number` is not available in the files template, as these are
rendered at build time.

When queries are routed to directly to a file (as when hitting a direct result),
the querystring `?q={{query}}` will be appended to the url. The `query` variable
will not be available when the files template is rendered. However, this string
may be retrieved using Javascript, which can then offer the user to visit search
results instead of the direct result.

The search script is located in the www-folder, so `http://.../search` will get
you the search page. Specifically `{{wwwroot}}/search`, `{{wwwroot}}` will be
introduced later. The search page takes the querystring `q` as query and `tree`
as tree. If `&format=json` is appended to the querystring, the search page will
return results in JSON format. If `&force` is appended to the querystring the
search page will **not** redirect to direct results, this is useful if users
wants to return from a direct result.
Querystring parameters `limit` and `offset` will be parsed as integers and
passed to the template engine, to use or ignore as it sees fit.


DXR Template Files
------------------
DXR uses 3 different template files, `index.html`, `search.html` and `file.html`
for the index page, search result pages and file pages, respectively.
Using Jinja2 template inheritance these templates may reuse the same layout,
however, this is not required. And DXR only requires these three files.

If the template folder contains an additional folder called `static/` this
folder will be copied into the www-folder when building the DXR html files.
You can use this folder to hold style sheets and images, however, note that
these files will not be processed by the template engine.

In the following sections you can read about which variables are available in
different template files.


Common Template Variables
-------------------------
_These variables are available in templates_

  `wwwroot`         Root of the DXR www folder, ie. `{{wwwroot}}/static/...`
                    can be used to refer to the `static/` folder.
                    (This is useful as DXR may serve your templates from any URL)
  `tree`            Currently browsed or searched tree, or arbitrary tree.
                    (Notice that the value is **always** a **valid tree**)
  `trees`           List of trees indexed by the DXR server.


Index Template Variables
------------------------
This template is rendered statically when the index is generated, and index template
only have access to the common template variables (see above).

TODO: Add automatically generated variables for displaying search suggestions that
      works in the general case. This can be done by using some statistics.
      (Nothing fancy, just something simple that probably works).


Search Template Variables
-------------------------
_Variables specific to the search template._
  `query`           Last search query or empty string if none.
  `results`         List of results as tuples of `(path, lines)`, where `lines`
                    is a list of lines as tuples of `(line_number, line)`.
                    NOTE: results is a **generator** you can only iterate over
                    it once, but you can iterate over lines multiple times.
                    (If querystring `offset` and `limit` were given these are
                     respected, otherwise 0 and 100 is assumed, respectively)
  `offset`          Querystring parameter `offset` as int, or 0.
  `limit`           Querystring parameter `limit` as int, or 100.


File Template Variables
-----------------------
All instances of this template is render statically when the index is generated.
Please note that the template should have Javascript support for handling the
querystring `?q={{qyery}}` where users should be offered to see search results at
`{{wwwroot}}/search?q?{{query}}&tree={{tree}}&force`, as `?q={{query}}`
indicates that the user was redirected to a direct result.
Note: the `query` variable is **not** available in the this template, and must
be parsed from querystring using Javascript.
Templates implementing this should also ensure that the anchor `#l{{line_number}}`
focuses, highlights and/or scrolls to line number `line_number`.

  `path`            Path of file being displayed
  `lines`           List of lines as tuple of `(line_number, line, annotations)`
                    where `annotations` is a dictionary of keys defined by templates.
  `revision`        Revision, as returned by revision command in config file.
                    (Revision is assumed to be the same for the whole tree).
  `generated`       True, if the file is generated as part of the build process.
  `sections`        List of sections as tuples of `(section, items)`, where
                    `section` is a section headline and `items` is a list
                    of items as tuples of `(icon, title, path, line)` where
                    `icon` is unspecified, `title` is a link title, `path`
                    and `line` a place of interest.                    
                    (Icons are provided by plugins, it is the templates
                     responsibility to defined these icons, the mozilla builtin
                     template defines these, so just copy this)


