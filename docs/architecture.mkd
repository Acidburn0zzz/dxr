DXR Application Architecture
============================
_This document gives a brief outline of the architecture for DXR._


The DXR Index Generation Process
--------------------------------
DXR is designed to generate a source code index offline, after which the
generated files can be uploaded to a public webserver. Plugins are allowed to
modify the build environment and tap into the compiler. Plugins will also be
asked for syntax regions, line annotations, navigation links and inline menues
when the HTML is generated.

The build process looks like this.

 1. Read user supplied configuration file (see configuration.mkd)
 2. Copy `server/` and template to `target_folder`
 3. Store relevant configuration keys in `server/config.py`
 4. Run the `make build` for all plugins
 5. For each source tree
    1. Run `pre_process` from `indexer.py` for all plugins
    2. Build the tree using `build_command`
    3. Run `post_process` from `indexer.py` for all plugins
    4. Launch subprocessees of `dxr-worker.py` to generate HTML
       (These reads configuration file and uses plugins `htmlifier` module)
 6. Verify integrity of the database


DXR Directory Structure
-----------------------
_A brief outline of important directories in the DXR source code._

 - `dxr/`               Various utlities for `dxr-build.py` and `dxr-worker.py`
 - `tests/`             Automated tests (see tests.mkd for details)
 - `sqlite-tokenizer/`  Customized tokenizer for sqlite full text search.
 - `server/`            Server side scripts
 - `plugins/`           Plugins (see plugins.mkd for details)
 - `docs/`              Documentation of important interfaces
 - `templates`          Templates (see templating.mkd for details)


